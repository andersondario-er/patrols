# TODO: generate this _instead_ of "params_fillable.yaml"  and then edit it
test1:
  name: Test 1
  description: "Test case for patrol-events"
  params:
    workflow_details:
      name: "Patrols Dashboard"
      description: "A dashboard for visualizing patrol trajectories, patrols events, and time density."

    # Parameters for 'Set Groupers' using task `set_groupers`.
    groupers:
      groupers: # (list[ecoscope_workflows.tasks.groupby._groupby.Grouper], FieldInfo(annotation=NoneType, required=True, description='            Index(es) and/or column(s) to group by, along with\n            optional display names and help text.\n            '))
        - index_name: "month"
          display_name: "Month"
          help_text: "The month in which the patrol began or the event was updated."
          directive: "%B"

    time_range:
      since: "2015-01-01T00:00:00Z"
      until: "2015-02-28T23:59:59Z"

    # Parameters for 'Get Patrol Observations from EarthRanger' using task `get_patrol_observations`.
    patrol_obs:
      client: "mep_dev" # (<class 'ecoscope_workflows.connections.EarthRangerClientProtocol'>, BeforeValidator(func=<bound method DataConnection.client_from_named_connection of <class 'ecoscope_workflows.connections.EarthRangerConnection'>>), WithJsonSchema(json_schema={'type': 'string', 'description': 'A named EarthRanger connection.'}, mode=None))
      patrol_type: ["05ad114e-1aff-4602-bc83-efd333cdd8a2"] # (<class 'str'>, FieldInfo(annotation=NoneType, required=False, default=None, description='Comma-separated list of type of patrol UUID'))

    # Parameters for 'Transform Relocations to Trajectories' using task `relocations_to_trajectory`.
    patrol_traj:
      min_length_meters: 0.001 # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
      max_length_meters: 10000 # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
      max_time_secs: 3600 # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
      min_time_secs: 1 # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
      max_speed_kmhr: 120 # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
      min_speed_kmhr: 0.0 # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))

    # Parameters for 'Get Patrol Events from EarthRanger' using task `get_patrol_events`.
    patrol_events:
      client: "mep_dev" # (<class 'ecoscope_workflows.connections.EarthRangerClientProtocol'>, BeforeValidator(func=<bound method DataConnection.client_from_named_connection of <class 'ecoscope_workflows.connections.EarthRangerConnection'>>), WithJsonSchema(json_schema={'type': 'string', 'description': 'A named EarthRanger connection.'}, mode=None))
      patrol_type: ["05ad114e-1aff-4602-bc83-efd333cdd8a2"] # (<class 'str'>, FieldInfo(annotation=NoneType, required=False, default=None, description='Comma-separated list of type of patrol UUID'))

    # Parameters for 'Draw Ecomaps for each combined Trajectory and Patrol Events group' using task `draw_ecomap`.
    traj_patrol_events_ecomap:
      tile_layers:
        - name: "SATELLITE"
        - name: "TERRAIN"
          opacity: 0.5

    # Parameters for 'Convert total patrol time units' using task `apply_arithmetic_operation`.
    total_patrol_time_converted:
      original_unit: "s"
      new_unit: "h"

    # Parameters for 'Convert total patrol distance units' using task `apply_arithmetic_operation`.
    total_patrol_dist_converted:
      original_unit: "m"
      new_unit: "km"

    average_speed_converted:
      original_unit: "km/h"
      new_unit: "km/h"

    max_speed_converted:
      original_unit: "km/h"
      new_unit: "km/h"

    # Parameters for 'Draw Time Series Bar Chart for Patrols Events' using task `draw_time_series_bar_chart`.
    patrol_events_bar_chart:
      time_interval: "month" # (typing.Literal['year', 'month', 'week', 'day', 'hour'], FieldInfo(annotation=NoneType, required=True, description='Sets the time interval of the x axis.'))
      grouped_styles:
        - category: "wildlife_sighting_rep"
          plot_style:
            marker_color: "#3e35a3"
        - category: "fence_rep"
          plot_style:
            marker_color: "#ff9600"
        - category: "radio_rep"
          plot_style:
            marker_color: "#b62879"
        - category: "rainfall_rep"
          plot_style:
            marker_color: "#f04564"
        - category: "traffic_rep"
          plot_style:
            marker_color: "#3089ff"
        - category: "fire_rep"
          plot_style:
            marker_color: "#8c1700"

    # Parameters for 'Calculate Time Density from Trajectory' using task `calculate_time_density`.
    td:
      max_speed_factor: 1.05 # (<class 'float'>, FieldInfo(annotation=NoneType, required=False, default=1.05))
      expansion_factor: 1.3 # (<class 'float'>, FieldInfo(annotation=NoneType, required=False, default=1.3))

  assertions:
    result_stdout_contains:
      - "A dashboard for visualizing patrol trajectories, patrols events, and time density."
      - "widget_type='map', title='Trajectories & Patrol Events Map'"
      - "widget_type='map', title='Time Density Map'"
      - "widget_type='graph', title='Patrol Events Bar Chart'"
      - "widget_type='graph', title='Patrol Events Pie Chart'"
      - "widget_type='stat', title='Total Patrols'"
      - "widget_type='stat', title='Total Time'"
      - "widget_type='stat', title='Total Distance'"
      - "widget_type='stat', title='Average Speed'"
      - "widget_type='stat', title='Max Speed'"
